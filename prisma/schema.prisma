// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"

    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    // github 
    refresh_token_expires_in String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    SHIPPER
    DRIVER
}

model User {
    id                String             @id @default(cuid())
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    phone_number      String?
    address           String?
    cin               String?
    role              UserRole           @default(SHIPPER)
    created_packages  Package[]          @relation("creator_package")
    updated_packages  Package[]          @relation("updator_package")
    city              City?              @relation(fields: [cityId], references: [id])
    cityId            String?
    packages_driven   Package[]          @relation("driver_package")
    packages_shipped  Package[]          @relation("shipper_package")
    shipmentProviders ShipmentProvider[]
}

model City {
    id               String            @id @default(cuid())
    name             String
    createAt         DateTime          @default(now())
    Customer         Customer[]
    Package          Package[]
    User             User[]
    shipmentProvider ShipmentProvider? @relation(name: "shipment_city")
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now())
}

model Status {
    id        String    @id @default(cuid())
    name      String
    style     String
    Package   Package[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now())
}

model ShipmentProvider {
    id                 String    @id @default(cuid())
    name               String
    autoTn             Boolean   @default(true)
    image              String
    owner              User      @relation(fields: [ownerId], references: [id])
    city               City      @relation(name: "shipment_city", fields: [cityId], references: [id])
    cityId             String    @unique
    ownerId            String
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @default(now())
}

model Customer {
    id        String    @id @default(cuid())
    name      String
    phone     String
    email     String?
    address   String
    cin       String?
    city      City      @relation(fields: [cityId], references: [id])
    shipperId String
    cityId    String
    Package   Package[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now())
}

model Package_History {
    id          String   @id @default(cuid())
    packageData Json
    packageId   String
    package     Package  @relation(fields: [packageId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
}

model WorkFlow {
    id                            String    @id @default(cuid())
    name                          String
    code                          String
    style                         String
    packages_with_shipping_method Package[] @relation(name: "shipping_method")
    package_with_workflow         Package[] @relation(name: "work_flow")
    createdAt                     DateTime  @default(now())
    updatedAt                     DateTime  @default(now())
}

model Package {
    id                      String            @id @default(cuid())
    tracking_number         String            @unique()
    reference               String
    description             String?
    amount                  Float             @default(0)
    weight                  Float             @default(0)
    shipping_fee            Float             @default(0)
    declared_value          Float             @default(0)
    prof_distributed_object Boolean           @default(false)
    fragile                 Boolean           @default(false)
    check_package           Boolean           @default(false)
    printed                 Boolean           @default(false)
    driver                  User              @relation(name: "driver_package", fields: [driverId], references: [id])
    shipper                 User              @relation(name: "shipper_package", fields: [shipperId], references: [id])
    city                    City              @relation(fields: [cityId], references: [id])
    customer                Customer          @relation(fields: [customerId], references: [id])
    shipping_method         WorkFlow          @relation(name: "work_flow", fields: [shipping_method_id], references: [id])
    work_flow               WorkFlow          @relation(name: "shipping_method", fields: [workFlowId], references: [id])
    status                  Status            @relation(fields: [statusId], references: [id])
    creator                 User              @relation(name: "creator_package", fields: [createdBy], references: [id])
    updator                 User              @relation(name: "updator_package", fields: [updatedBy], references: [id])
    createdBy               String
    updatedBy               String
    created_at              DateTime          @default(now())
    updated_at              DateTime          @default(now())
    customerId              String
    statusId                String
    shipping_method_id      String
    workFlowId              String
    history                 Package_History[]
    cityId                  String
    driverId                String
    shipperId               String
}
