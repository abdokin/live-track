// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    // github 
    refresh_token_expires_in String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                           String             @id @default(cuid())
    name                         String?
    email                        String?            @unique
    emailVerified                DateTime?
    image                        String?
    accounts                     Account[]
    sessions                     Session[]
    packages_driven              Package[]          @relation("driver")
    packages_shipped             Package[]          @relation("shipper")
    packages_created             Package[]          @relation("creator")
    packages_updated             Package[]          @relation("updator")
    phone_number                 String?
    address                      String?
    cin                          String?
    // Package          Package[]
    templates_updated            Template[]         @relation("template_creator")
    template_created             Template[]         @relation("template_updator")
    shipment_providers_created   ShipmentProvider[] @relation(name: "shipment_provider_creator")
    shipment_provider_updated    ShipmentProvider[] @relation(name: "shipment_provider_updator")
    shipment_providers_access    Int[]
    status                       Boolean            @default(false)
    current_shipment_provider_id String?
    current_shipment_provider    ShipmentProvider?   @relation(name: "current_shipment_provider", fields: [current_shipment_provider_id], references: [id], onDelete: Cascade)
    tracking_number_prefix       String?
    discount                     Decimal            @default(0)
    driver_id                    String?
    pick_up_delivery_op_id       String?
    pick_up_delivery_op_price    Decimal?
    reverse_delivery_op_id       String?
    reverse_delivery_op_price    Decimal?
    declared_value               Decimal?
    prof_distributed_object      Boolean            @default(false)
    fragile                      Boolean            @default(false)
    // created by and updated by
    updated_by                   String?
    updator                      User?               @relation(name: "user_updator", fields: [updated_by], references: [id], onDelete: Cascade)
    created_by                   String?
    creator                      User?               @relation(name: "user_creator", fields: [created_by], references: [id], onDelete: Cascade)
    updated_users                User[]             @relation(name: "user_updator")
    created_users                User[]             @relation(name: "user_creator")
    prices_updated               Price[]            @relation(name: "price_updator")
    prices_created               Price[]            @relation(name: "price_creator")
    upload_histories             UploadHistory[]    @relation(name: "upload_history_creator")
    package_history              PackageHistory[]   @relation("package_updator")
    DeliveryRun                  DeliveryRun[]
    routes_created               Route[]            @relation(name: "route_creator")
    routes_updated               Route[]            @relation(name: "route_updator")
    Weight                       Weight[]
    movable_units_updated        MovableUnits[]     @relation(name: "movable_unit_updator")
    movable_units_created        MovableUnits[]     @relation(name: "movable_unit_creator")
    movable_units_driven         MovableUnits[]     @relation(name: "movable_unit_driver")
}

model Weight {
    id              String  @id @default(cuid())
    from            Decimal
    to              Decimal
    door_delivery   Decimal
    failed_delivry  Decimal
    pick_up_station Decimal
    customer_return Decimal
    status          Boolean @default(false)
    note            String
    updated_by      String
    updator         User    @relation(fields: [updated_by], references: [id], onDelete: Cascade)
}

model TemplateType {
    id       String     @id @default(cuid())
    name     String
    Template Template[]
}

model Template {
    id         String       @id @default(cuid())
    code       String       @db.Text
    type_id    String
    type       TemplateType @relation(fields: [type_id], references: [id], onDelete: Cascade)
    updated_by String
    updator    User         @relation(name: "template_updator", fields: [updated_by], references: [id], onDelete: Cascade)
    created_by String
    creator    User         @relation(name: "template_creator", fields: [created_by], references: [id], onDelete: Cascade)
    status     Boolean      @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ShipmentProviderType {
    id   String @id @default(cuid())
    name String
}

model ShipmentProvider {
    id                      String           @id @default(cuid())
    name                    String
    address                 String
    phone                   String
    auto_tn                 Boolean          @default(false)
    image                   String
    status_id               String
    status                  Status           @relation(fields: [status_id], references: [id], onDelete: Cascade)
    city_id                 String
    city                    City             @relation(fields: [city_id], references: [id], onDelete: Cascade)
    packages_first_mile     Package[]        @relation(name: "first_mile")
    packages_last_mile      Package[]        @relation(name: "last_mile")
    packages_shipment       Package[]        @relation(name: "shipment_provider")
    updated_by              String
    updator                 User             @relation(name: "shipment_provider_updator", fields: [updated_by], references: [id], onDelete: Cascade)
    created_by              String
    creator                 User             @relation(name: "shipment_provider_creator", fields: [created_by], references: [id], onDelete: Cascade)
    users_in                User[]           @relation(name: "current_shipment_provider")
    prices                  Price[]
    UploadHistory           UploadHistory[]
    PackageHistory          PackageHistory[]
    PlTracking              PlTracking[]
    DeliveryRun             DeliveryRun[]
    routes_from_hub         Route[]          @relation(name: "from_hub_route")
    routes_to_hub           Route[]          @relation(name: "to_hub_route")
    movableUnits_last_mile  MovableUnits[]   @relation(name: "last_mile_movable_unit")
    movableUnits_first_mile MovableUnits[]   @relation(name: "first_mile_movable_unit")
}

model Price {
    id                String           @id @default(cuid())
    first_mile_hub_id String
    first_mile_hub    ShipmentProvider @relation(fields: [first_mile_hub_id], references: [id], onDelete: Cascade)
    city_id           String
    city              City             @relation(fields: [city_id], references: [id], onDelete: Cascade)
    updated_by        String
    updator           User             @relation(name: "price_updator", fields: [updated_by], references: [id], onDelete: Cascade)
    creator           User             @relation(name: "price_creator", fields: [created_by], references: [id])
    created_by        String
    status            Boolean          @default(false)
}

model City {
    id                    String             @id @default(cuid())
    packages              Package[]
    shipment_providers_in ShipmentProvider[]
    name                  String
    region                String
    lat                   Decimal
    lng                   Decimal
    country               String
    Price                 Price[]
}

model Upload {
    id      String    @id @default(cuid())
    Package Package[]
}

model WorkFlow {
    id                       String           @id @default(cuid())
    packages_work_flow       Package[]        @relation(name: "work_flow")
    packages_shipping_method Package[]        @relation(name: "shipping_method")
    code                     String
    name                     String
    Reason                   Reason[]
    PackageHistory           PackageHistory[]
    Route                    Route[]
}

model UploadHistory {
    id                   String           @id @default(cuid())
    total_packages       Int
    success              Int
    failure              Int
    status               Boolean          @default(false)
    log_file             String
    shipment_provider_id String
    shipment_provider    ShipmentProvider @relation(fields: [shipment_provider_id], references: [id], onDelete: Cascade)
    upload_status_id     String
    upload_status        Status           @relation(fields: [upload_status_id], references: [id], onDelete: Cascade)

    created_by String
    creator    User   @relation("upload_history_creator", fields: [created_by], references: [id], onDelete: Cascade)
}

model Status {
    id                String             @id @default(cuid())
    packages          Package[]
    shipment_provider ShipmentProvider[]
    name              String
    style             String
    UploadHistory     UploadHistory[]
    Reason            Reason[]
    PackageHistory    PackageHistory[]
    DeliveryRun       DeliveryRun[]
    MovableUnits      MovableUnits[]
}

model Action {
    id             String           @id @default(cuid())
    packages       Package[]
    name           String
    style          String
    PackageHistory PackageHistory[]
}

model Configuration {
    id                          String   @id @default(cuid())
    upload_prefix               String
    pick_up_prefix              String
    forward_delivery_prefix     String
    reverse_delivery_prefix     String
    forward_movable_unit_prefix String
    reverse_movable_unit_prefix String
    lost_deadline               DateTime
    vd_price                    Decimal
    currency                    String
    pod_price                   Decimal
    fragile_price               Decimal
}

model Route {
    id           String           @id @default(cuid())
    name         String
    from_hub_id  String
    from_hub     ShipmentProvider @relation(name: "from_hub_route", fields: [from_hub_id], references: [id], onDelete: Cascade)
    to_hub_id    String
    to_hub       ShipmentProvider @relation(name: "to_hub_route", fields: [to_hub_id], references: [id], onDelete: Cascade)
    work_flow_id String
    work_flow    WorkFlow         @relation(fields: [work_flow_id], references: [id], onDelete: Cascade)
    processes    String
    created_by   String
    creator      User             @relation(name: "route_creator", fields: [created_by], references: [id], onDelete: Cascade)
    updated_by   String
    updator      User             @relation(name: "route_updator", fields: [updated_by], references: [id], onDelete: Cascade)
}

model DeliveryRun {
    id              String           @id @default(cuid())
    packages        Package[]
    forward_reverse Boolean          @default(false)
    status_id       String
    status          Status           @relation(fields: [status_id], references: [id], onDelete: Cascade)
    driver_id       String
    driver          User             @relation(fields: [driver_id], references: [id], onDelete: Cascade)
    first_mile_id   String
    first_mile      ShipmentProvider @relation(fields: [first_mile_id], references: [id], onDelete: Cascade)
}

model MovableUnits {
    id              String           @id @default(cuid())
    packages        Package[]
    cell_pass       String
    forward_reverse Boolean          @default(false)
    status_id       String
    status          Status           @relation(fields: [status_id], references: [id], onDelete: Cascade)
    driver_id       String
    driver          User             @relation(name: "movable_unit_driver", fields: [driver_id], references: [id], onDelete: Cascade)
    first_mile_id   String
    first_mile      ShipmentProvider @relation(name: "first_mile_movable_unit", fields: [first_mile_id], references: [id], onDelete: Cascade)
    last_mile_id    String
    last_mile       ShipmentProvider @relation(name: "last_mile_movable_unit", fields: [last_mile_id], references: [id], onDelete: Cascade)
    updated_by      String
    updator         User             @relation(name: "movable_unit_updator", fields: [updated_by], references: [id], onDelete: Cascade)
    created_by      String
    creator         User             @relation(name: "movable_unit_creator", fields: [created_by], references: [id], onDelete: Cascade)
}

model MasterBag {
    id             String           @id @default(cuid())
    Package        Package[]
    PackageHistory PackageHistory[]
}

model PlTracking {
    id                   String           @id @default(cuid())
    tracking_number      String
    shipment_provider_id String
    shipment_provider    ShipmentProvider @relation(fields: [shipment_provider_id], references: [id], onDelete: Cascade)
    package_id           String
}

model Reason {
    id             String           @id @default(cuid())
    packages       Package[]
    name           String
    work_flow_id   String
    work_flow      WorkFlow         @relation(fields: [work_flow_id], references: [id], onDelete: Cascade)
    max_attempt    Int
    options        String
    next_status_id String
    next_status    Status           @relation(fields: [next_status_id], references: [id])
    PackageHistory PackageHistory[]
}

model PackageHistory {
    id                   String           @id @default(cuid())
    package_id           String
    tracking_number      String
    reference            String
    shipping_fee         Decimal
    shipment_provider_id String
    shipment_provider    ShipmentProvider @relation(fields: [shipment_provider_id], references: [id], onDelete: Cascade)
    work_flow_id         String
    work_flow            WorkFlow         @relation(fields: [work_flow_id], references: [id], onDelete: Cascade)
    status_id            String
    status               Status           @relation(fields: [status_id], references: [id], onDelete: Cascade)
    action_id            String
    action               Action           @relation(fields: [action_id], references: [id], onDelete: Cascade)
    amount_to_collect    Decimal
    location_id          String
    location             Location         @relation(fields: [location_id], references: [id], onDelete: Cascade)
    reason_id            String
    reason               Reason           @relation(fields: [reason_id], references: [id], onDelete: Cascade)
    attempts             Int
    master_bag_id        String
    master_bag           MasterBag        @relation(fields: [master_bag_id], references: [id], onDelete: Cascade)
    scheduled            Boolean
    transaction_id       String
    transaction          Transaction      @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
    updated_by           String
    updator              User             @relation("package_updator", fields: [updated_by], references: [id], onDelete: Cascade)
}

model Location {
    id             String           @id @default(cuid())
    Package        Package[]
    PackageHistory PackageHistory[]
}

model Return {
    id      String    @id @default(cuid())
    Package Package[]
}

model Transaction {
    id             String           @id @default(cuid())
    Package        Package[]
    PackageHistory PackageHistory[]
}

model Package {
    id                       String           @id @default(cuid())
    tracking_number          String
    reference                String
    customer_phone           String
    customer_email           String?
    customer_name            String
    customer_address         String
    customer_city_id         String
    customer_city            City             @relation(fields: [customer_city_id], references: [id], onDelete: Cascade)
    customer_cin             String?
    latitude                 Float?
    longitude                Float?
    product_description      String?
    Amount                   Decimal          @default(0)
    shipper_id               String
    shipper                  User             @relation(name: "shipper", fields: [shipper_id], references: [id], onDelete: Cascade)
    created_by               String
    creator                  User             @relation(name: "creator", fields: [created_by], references: [id], onDelete: Cascade)
    fist_mile_hub_id         String
    first_mile_hub           ShipmentProvider @relation(name: "first_mile", fields: [fist_mile_hub_id], references: [id], onDelete: Cascade)
    last_mile_hub_id         String
    last_mile_hub            ShipmentProvider @relation(name: "last_mile", fields: [last_mile_hub_id], references: [id], onDelete: Cascade)
    upload_id                String
    upload                   Upload?          @relation(fields: [upload_id], references: [id], onDelete: Cascade)
    weight                   Decimal          @default(0)
    shipping_fee             Decimal          @default(0)
    declared_value           Decimal          @default(0)
    proof_distributed_object Boolean          @default(false)
    fragile                  Boolean          @default(false)
    check_package            Boolean          @default(false)
    printed                  Boolean          @default(false)
    shipment_provider_id     String
    shipment_provider        ShipmentProvider @relation(name: "shipment_provider", fields: [shipment_provider_id], references: [id], onDelete: Cascade)
    work_flow_id             String
    work_flow                WorkFlow         @relation("work_flow", fields: [work_flow_id], references: [id], onDelete: Cascade)
    status_id                String
    status                   Status           @relation(fields: [status_id], references: [id], onDelete: Cascade)
    action_id                String
    action                   Action           @relation(fields: [action_id], references: [id], onDelete: Cascade)
    updated_by_id            String
    updator                  User             @relation("updator", fields: [updated_by_id], references: [id], onDelete: Cascade)
    amount_to_collect        Decimal          @default(0)
    delivery_run_id          String?
    delivery_run             DeliveryRun?     @relation(fields: [delivery_run_id], references: [id], onDelete: Cascade)
    movable_units_id         String
    movable_units            MovableUnits     @relation(fields: [movable_units_id], references: [id], onDelete: Cascade)
    attempts                 Int              @default(0)
    driver_id                String
    driver                   User             @relation(name: "driver", fields: [driver_id], references: [id], onDelete: Cascade)
    master_bag_id            String
    master_bag               MasterBag        @relation(fields: [master_bag_id], references: [id], onDelete: Cascade)
    location_id              String
    location                 Location         @relation(fields: [location_id], references: [id], onDelete: Cascade)
    reason_id                String
    reason                   Reason           @relation(fields: [reason_id], references: [id], onDelete: Cascade)
    scheduled                Boolean          @default(false)
    scheduled_date           DateTime?        @default(now())
    return_id                String
    return                   Return           @relation(fields: [return_id], references: [id], onDelete: Cascade)
    transaction_id           String
    transaction              Transaction      @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
    tracking_number_prefix   String           @default("MC")
    shipping_method_id       String
    shipping_method          WorkFlow         @relation(name: "shipping_method", fields: [shipping_method_id], references: [id], onDelete: Cascade)
    per_coast                Decimal          @default(0)
    created_at               DateTime         @default(now())
    updated_at               DateTime         @default(now())
    // shipment_provider        ShipmentProvider? @relation(fields: [shipment_provider_id], references: [id],onDelete: Cascade)
    // shipment_provider_id     String?
}
